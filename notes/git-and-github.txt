Git & GitHub Notes
==================

1. Version Control System (VCS)
-------------------------------
- Track Changes
- Collaborate Efficiently
- Backup and Recovery

2. Git
------
- Popular VCS
- Branching & Merging
- Speed & Efficiency

3. GitHub
---------
- Code Hosting
- Collaboration
- Community & Open Source

4. Git Workflow
---------------
- Untracked → Tracked → Staged → Commit

5. Repository
-------------
- Storage location for your code and its history.
- Can be local or remote.
- Tracks all changes to your project files.

6. Working Directory
--------------------
- Location where you work on your code.
- Changes made here are not yet saved in Git's history.

7. Local Repository
-------------------
- The version of the repository stored on your computer.
- You use it to make commits and view the version history.

8. Remote Repository
--------------------
- The version of the repository stored on platforms like GitHub.
- Used to share your work with others or collaborate on projects.

9. Git Workflow Steps
---------------------
- working directory → staging area → local repository → remote repository
- git add → git commit → git push

10. Common Git Commands
-----------------------

a. Installation & Setup
-----------------------
- Set username:  
    git config --global user.name "faiz"
- Set email:  
    git config --global user.email "faiz@gmail.com"
- List config:  
    git config --list
- Unset username/email:  
    git config --global --unset user.name  
    git config --global --unset user.email

b. Pushing Code to GitHub
-------------------------
- Initialize repository:  
    git init
- Add files:  
    git add <file>  
    git add .
- Commit changes:  
    git commit -m "commit message"
- Rename branch to main:  
    git branch -M main
- Add remote:  
    git remote add origin https://github.com/faiz/project1
- Push to remote:  
    git push -u origin main

c. .gitignore File
------------------
- Example entries:
    app.js
    *.css
    folder/

d. git restore Command
----------------------
- Restore file in working directory:  
    git restore <file>  
    git restore .
- Unstage file:  
    git restore --staged <file>

e. git revert Command
---------------------
- Show commit hashes:  
    git log  
    git log --oneline
- Revert a commit (creates a new commit):  
    git revert <commit_hash>

f. git reset Command
--------------------
- Reset to specific commit:  
    git reset <commit_hash>
- Soft reset (keeps changes staged):  
    git reset --soft HEAD~1
- Mixed reset (default, keeps changes unstaged):  
    git reset --mixed HEAD~1  
    git reset HEAD~1
- Hard reset (removes changes from working directory):  
    git reset --hard HEAD~1

g. git status & Aliases
-----------------------
- Check status:  
    git status
- Create alias (global):  
    git config --global alias.st status
- Create alias (local):  
    git config alias.b branch
- Edit .gitconfig with nano:  
    nano .gitconfig

h. Branching
------------
- List branches:  
    git branch
- Create branch:  
    git branch <branch_name>
- Switch branch:  
    git switch <branch_name>  
    git checkout <branch_name>
- Create & switch:  
    git switch -c <branch_name>  
    git checkout -b <branch_name>
- Delete branch:  
    git branch -D <branch_name>
- Push branch:  
    git push -u origin <branch_name>
- Merge branch:  
    git switch main  
    git merge <branch_name>  
    git push -u origin main

i. Amend Commit
---------------
- Amend last commit message:  
    git commit --amend -m "new message"
- Amend interactively:  
    git commit --amend  
    (Use vim: ESC, :wq to save)

j. Cloning Repositories
-----------------------
- Clone repo:  
    git clone https://github.com/faiz/project
- Clone into current directory:  
    git clone https://github.com/faiz/project .
- Clone specific branch:  
    git clone --branch <branch> https://github.com/faiz/project

k. git fetch vs git pull
------------------------
- Fetch changes:  
    git fetch origin  
    git status  
    git merge origin/main
- Pull changes:  
    git pull origin main

l. git diff Command
-------------------
- Show unstaged changes:  
    git diff
- Show staged changes:  
    git diff --staged
- Compare with remote:  
    git diff origin/main
- Compare two commits:  
    git diff <commit1> <commit2>
- Show only file names:  
    git diff --name-only
- Show word diff:  
    git diff --color-words

m. Skip Staging Area
--------------------
- Commit tracked files directly:  
    git commit -a -m "message"
- Commit specific file directly:  
    git commit <file> -a -m "message"

n. Git Stash
------------
- Stash changes:  
    git stash
- List stashes:  
    git stash list
- Apply latest stash:  
    git stash apply
- Apply specific stash:  
    git stash apply stash@{0}
- Pop latest stash:  
    git stash pop
- Clear all stashes:  
    git stash clear

o. Collaborating on a GitHub Repo
---------------------------------
- Fork the repository on GitHub.
- Clone your fork:  
    git clone <forked_repo_url>
- Add upstream remote:  
    git remote add upstream <original_repo_url>
- Fetch and merge upstream changes:  
    git fetch upstream  
    git merge upstream/main

p. Creating & Merging Pull Requests
-----------------------------------
- Push your branch to GitHub.
- Go to GitHub and create a Pull Request.
- Review and merge the PR.

q. Creating an Attractive README.md File
----------------------------------------
- Use Markdown for formatting.
- Include project title, description, installation, usage, and license.

r. Deploying a Static Website on GitHub Pages
---------------------------------------------
- Push your static site to the `main` or `gh-pages` branch.
- Enable GitHub Pages in repository settings.

s. Deploying Vite React App on GitHub
-------------------------------------
- Build the app:  
    npm run build
- Push the `dist` folder to `gh-pages` branch.
- Configure GitHub Pages.

t. GitHub Actions Introduction
------------------------------
- Built-in CI/CD tool in GitHub.
- Automates tasks like testing, building, and deploying.
- Works like a Virtual Assistant for developers.

u. Why Do We Need GitHub Actions?
---------------------------------
- Automates builds & tests.
- Improves code quality.
- Auto-deployment.
- Scalable & Secure

v. GitHub Actions Workflow
--------------------------
- Automated process that runs based on triggers
- Defined using YAML files inside .github/workflows/ folder.

w. Key Components of a Workflow
-------------------------------
- Event
- Job
- Step
- Runner

x. Workflow Execution Flow
--------------------------
- Event occurs → Workflow starts → Jobs execute in parallel (by default).

y. Creating First GitHub Actions Workflow
-----------------------------------------
- Create a YAML file in `.github/workflows/`.
- Define jobs and steps.

    name: First workflow

    on:
     push:
      branches: [ main ]

    jobs:
     demo:
      runs-on: ubunto-latest

      steps:
       - name: Greeting
         run: echo "Hello World"


z. Scheduling GitHub Actions Workflows
--------------------------------------
- Use `on: schedule` in workflow YAML.

    name: Schedule Job

    on:
     schedule:
      - cron: "0 0 * * *"

    jobs:
     run-script: ununto-latest

     steps:
      - name: Print message
        run: echo "Schedule workflow Executed"
       

aa. Disabling GitHub Actions Workflows from GitHub
--------------------------------------
- Remove or rename the workflow YAML file.

ab. Automating Angular Build Process with GitHub Actions
--------------------------------------------------------
- Set up workflow to build and deploy Angular app.

    name: Build My Angular App

    on:
     push:
      branches: [ main ]

    jobs:
     build-angular-app:
      runs-on:ubunto-latest

     steps:
      - uses: actions/checkout@v4.2.2
      - name: Setup Node js
        uses: actions/setup-node@v4.2.0
        with:
         node-version: 22x
        name: Install dependencies
        run: npm install
        name: Build Angular App
        run: npm run build



marketplace:

checkout

setup nodejs environment

ac. Artifacts & Caching for Next.js Build (GitHub Actions)
----------------------------------------------------------
- Use `actions/upload-artifact` and `actions/cache` in workflow.

    name: Next Js Build with Caching & Artifacts

    on:
     push:
      branches: [ main ]

    jobs:
     build:
      runs-on: unbunto-latest

      steps:
       - name: Checkout Repository
         uses: actions/checkout@v4.2.2

       - name: Setup Node Js
         uses: actions/setup-node@v4.2.0
         with:
          node-version:22.x
          cache: 'npm'

       - name: Install dependencies
         run: npm install

       - name: Build Next Js App
         run: npm run build

       - name: upload Build on Artifacts
         uses: actions/upload-artifact@v4.6.0
         with:
          name: nextjs-build
          path: out/
          

ad. Job Concurrency in GitHub Actions
-------------------------------------
- Use `concurrency` key in workflow YAML to control job concurrency.

    name: Deploy Next js App

    on:
     push:
      branches: [ main ]

    jobs:
     build:
      runs-on: ubunto-latest

      concurrency:
       group: deploy
       cancel-in-progress: true

      steps:
       - name: Checkout Repository
         uses: actions/checkout@v4.2.2
       - name: Install dependencies
         run: npm install
       - name: Build Next.JS App
         run: npm run build
       - name: Deploy App
         run: echo "Deploy App..."

ae. Generating SSH Key for GitHub (SSH vs HTTPS)
------------------------------------------------
- Generate SSH key:  
    ssh-keygen -t ed25519 -C "faiz@gmail.com"
